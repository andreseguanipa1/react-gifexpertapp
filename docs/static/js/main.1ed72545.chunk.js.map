{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAEI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,QAAU,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQlB,SAEI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SApBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,qBAAKc,UAAU,yCAAf,SACI,qBAAKC,IAAKf,EAAKgB,IAAKN,EAAOA,MAAOA,OCFjCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDjBwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OAEI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAHhB,SAKI,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAM,SAAAC,GAAG,OACZ,cAAE,EAAF,eAA+BA,GAAZA,EAAIC,aEflCgB,EAAe,WAExB,MAAmCzC,mBAAS,CAAC,KAA7C,mBAAO0C,EAAP,KAAkB3C,EAAlB,KAEA,OACI,qCACI,sBAAK+B,UAAU,YAAf,UACI,iDACA,cAAE,EAAF,CAAc/B,cAAgBA,IAFlC,UAGI,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,WAM9B,iCACI,6D,MCpBhB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1ed72545.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);  // Se escribirá en el valor del input el cambio que hagamos\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length >= 2){\r\n            setCategories(cats => [inputValue, ...cats]);   //Se agrega primero la nueva y luego se insertan la anteriores\r\n            setInputValue('');\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\r\n\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=MzHlVLuwVY5DKga0JT3VCTnU7xmRrsjb`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} title={title}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);  // data:images . Se cambia el nombre de data a images para que use otro nombre dentro del código\r\n\r\n    return (\r\n\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3> \r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}      {/* Operador ternario... Si loading es true ejecuta el parrafo, sino, no ejecuta nada */}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map(( img =>\r\n                        < GifGridItem key={img.id} {...img} />\r\n                    ))\r\n\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories,setCategories] = useState(['']); // useState devuelve una constante con el valor asignado.\r\n                                                                                            // setCategories nor sirve para actulizar ese valor asignado.\r\n    return(\r\n        <>\r\n            <div className=\"container\">\r\n                <h2>Search your Gif</h2>\r\n                < AddCategory setCategories={ setCategories } />       {/*  Se llama al componente AddCategory y se le envía la función setCategories */}\r\n                <hr />\r\n\r\n                <ol>\r\n                    {\r\n                        categories.map(category => (\r\n                            <GifGrid key={category} category={category} />\r\n                        ))\r\n                    }\r\n                </ol>\r\n            </div>\r\n\r\n            <footer>\r\n                <h2>Andres Guanipa - 2021</h2>\r\n            </footer>\r\n        </>\r\n    );\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp}  from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}